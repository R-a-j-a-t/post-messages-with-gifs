{"version":3,"sources":["GifSearchMenu.jsx","CreatePost.jsx","DisplayPosts.jsx","App.jsx","index.js"],"names":["offset","addGifToPost","event","hideSearchMenu","addGifSrc","addAltTexts","setGifsList","target","className","cloneGif","document","getElementById","id","cloneNode","replace","removeGifBtn","createElement","style","position","onclick","parent","parentElement","split","state","filter","elem","alt","children","child","remove","removeGif","textContent","wrappedGif","append","querySelector","GifSearchMenu","searchGif","useState","gifsList","loading","setLoading","type","onBlur","value","onKeyDown","keyCode","q","url","process","fetch","then","res","status","json","Error","src","result","data","map","idx","title","catch","err","console","log","fetchGifs","placeholder","onClick","CreatePost","postList","onPost","gifSrc","setGifSrc","altTexts","setAltTexts","setSearchGif","textRef","useRef","ref","toggleShowSearchMenu","current","length","post","text","createPost","content","displayPosts","len","gifs","querySelectorAll","l","i","newPost","unshift","DisplayPosts","App","setPostList","root","render"],"mappings":"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","file":"static/js/main.2d95a274.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\n// GifSearchMenu deals with allowing the user to see and select gifs for a post\r\n\r\nconst API_KEY = process.env.REACT_APP_API_KEY;\r\nconst ENDPOINT = process.env.REACT_APP_ENDPOINT;\r\nconst LIMIT = process.env.REACT_APP_LIMIT;\r\n// offset: used to get new gifs for consecutive searches of the same query\r\nlet offset = 0;\r\n\r\n// fetchGifs: returns the gif elements created from the info provided by the api call\r\nconst fetchGifs = (event, setGifsList, setLoading) => {\r\n    // Didn't work for 'enter' on android phone\r\n    // if (event.code !== 'Enter' && event.code !== 'NumpadEnter') {\r\n    //     return;\r\n    // }\r\n    if (event.keyCode !== 13) {\r\n        return;\r\n    }\r\n    setLoading(true);\r\n    const q = event.target.value;\r\n    const url = `${ENDPOINT}/search?api_key=${API_KEY}&q=${q}&limit=${LIMIT}&offset=${offset}&rating=g`;\r\n\r\n    fetch(url)\r\n    .then(res => {\r\n        if (res.status === 200) {\r\n            return res.json();\r\n        }\r\n        throw new Error(`Response status: ${res.status}`);\r\n    })\r\n    .then(json => {\r\n        let src;\r\n        let result = json.data.map((elem, idx) => {\r\n            src = process.env.REACT_APP_MEDIA_ROOT + elem.id + process.env.REACT_APP_MEDIA_LEAF;\r\n            \r\n            return (\r\n                <img key={idx}\r\n                     id={elem.id}\r\n                     className=\"gif-result\"\r\n                     src={src} \r\n                     alt={elem.title}\r\n                    />\r\n            );\r\n        });\r\n        offset = offset + 5;\r\n        setLoading(false);\r\n        setGifsList(result);\r\n    })\r\n    .catch(err => console.log(err));\r\n}\r\n\r\n// removeGif: allows user to remove a gif before committing a post\r\nconst removeGif = (event, addGifSrc, addAltTexts) => {\r\n    const parent = event.target.parentElement;\r\n    let id = parent.id.split('-')[2];\r\n    addGifSrc(state => state.filter(elem => elem !== id));\r\n    let alt = \"\";\r\n    for (let child of parent.children) {\r\n        if (child.id === id) {\r\n            alt = child.alt;\r\n            break;\r\n        }\r\n    }\r\n    addAltTexts(state => state.filter(elem => elem !== alt));\r\n    parent.remove();\r\n}\r\n\r\n// addGifToPost: appends a copy of the selected gif from the search results onto the create post section\r\nconst addGifToPost = (event, hideSearchMenu, addGifSrc, addAltTexts, setGifsList) => {\r\n    let {target} = event;\r\n    if (target.className === 'gif-result') {\r\n        setGifsList([]);\r\n\r\n        let gif = document.getElementById(target.id); // querySelector will not work for id starting with digits\r\n        let cloneGif = gif.cloneNode(true);\r\n        cloneGif.id = 'tmp-' + cloneGif.id;\r\n        cloneGif.className = cloneGif.className\r\n                                .replace('gif-result', 'post-gif-result');\r\n                                     \r\n\r\n        const removeGifBtn = document.createElement('button');\r\n        removeGifBtn.className = 'remove-gif';\r\n        removeGifBtn.style.position = 'absolute';\r\n        removeGifBtn.onclick = event => removeGif(event, addGifSrc, addAltTexts);\r\n        removeGifBtn.textContent = 'X';\r\n\r\n        const wrappedGif = document.createElement('div');\r\n        wrappedGif.id = `wrapper-gif-${target.id}`;\r\n        wrappedGif.className = 'current-gif';\r\n        \r\n        wrappedGif.append(cloneGif, removeGifBtn);\r\n\r\n        let parent = document.querySelector('#added-gif');\r\n        parent.append(wrappedGif);\r\n        addGifSrc(state => [...state, target.id]);\r\n        addAltTexts(state => [...state, target.alt])\r\n        hideSearchMenu();\r\n    }\r\n\r\n}\r\n\r\nexport default function GifSearchMenu({ searchGif, hideSearchMenu, addGifSrc, addAltTexts }) {\r\n    const [gifsList, setGifsList] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    return (\r\n        <div id=\"gif-search-menu\" \r\n             className={searchGif ? 'menuVisible' : 'menuHidden'}\r\n            >\r\n            <input type=\"text\" \r\n                   onBlur={event => event.target.value = \"\"} \r\n                   className=\"gif-search-box\"\r\n                   onKeyDown={event => fetchGifs(event, setGifsList, setLoading)}\r\n                   placeholder=\"Press enter to search\" />\r\n            <div className=\"gifs-list\" \r\n                 onClick={event => addGifToPost(event, hideSearchMenu, addGifSrc, addAltTexts, setGifsList)}>\r\n                { <p id=\"loading-sign\" className={loading ? 'showLoading' : 'hideLoading'}>Loading...</p> }\r\n                { gifsList }\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React, { useRef, useState } from 'react';\r\n\r\nimport GifSearchMenu from './GifSearchMenu';\r\n\r\n// CreatePost component deals with creating a post\r\n\r\n// createPost: returns details for the current post\r\nconst createPost = (event, gifSrc, setGifSrc, altTexts, setAltTexts, postList, onPost, textRef) => {\r\n    if (textRef.current.value === '' && gifSrc.length === 0) {\r\n        return;\r\n    }\r\n    let post = {\r\n        text: textRef.current.value,\r\n        gifSrc,\r\n        altTexts,\r\n    };\r\n\r\n    onPost([...postList, post]);\r\n    textRef.current.value = \"\";\r\n    setGifSrc([]);\r\n    setAltTexts([]);\r\n};\r\n\r\n// toggleShowSearchMenu: toggle visibility of the gif search menu\r\nconst toggleShowSearchMenu = (event, searchGif, setSearchGif) => {\r\n    if (searchGif) {\r\n        setSearchGif(false);\r\n    }\r\n    else {\r\n        setSearchGif(true);\r\n    }\r\n}\r\n\r\nexport default function CreatePost({ postList, onPost }) {\r\n    const [gifSrc, setGifSrc] = useState([]);\r\n    const [altTexts, setAltTexts] = useState([]);\r\n    const [searchGif, setSearchGif] = useState(false);\r\n    const textRef = useRef(\"\");\r\n\r\n    return (\r\n        <div id=\"create-post\">\r\n            <textarea className=\"textarea-post\"\r\n                      ref={textRef}\r\n                      placeholder=\"Type something here...\" />\r\n            <div id=\"added-gif\"></div>\r\n            <button className=\"add-gif-btn\"\r\n                    onClick={(event) => toggleShowSearchMenu(event, searchGif, setSearchGif)}\r\n                    >+&nbsp;GIF</button>\r\n            <GifSearchMenu  searchGif={searchGif}\r\n                            hideSearchMenu={() => setSearchGif(false)}\r\n                            addGifSrc={setGifSrc}\r\n                            addAltTexts={setAltTexts} />\r\n            <hr />\r\n            <button type=\"submit\"\r\n                    onClick={\r\n                        (event) => createPost(event, gifSrc, setGifSrc, altTexts, setAltTexts, postList, onPost, textRef)\r\n                    }\r\n                    className=\"submit-post\">Post</button> \r\n        </div>\r\n    );\r\n}","import React from 'react';\r\n\r\n// DisplayPosts deals with displaying posts\r\n\r\nlet content = [];\r\nconst ROOT = process.env.REACT_APP_MEDIA_ROOT; // getting root endpoint\r\nconst LEAF = process.env.REACT_APP_MEDIA_LEAF; // getting remaining path\r\n\r\n// displayPosts: returns the posts created from the info \r\n//                  sent from createPost function in CreatePost component \r\nconst displayPosts = postList => {\r\n    let len = postList.length;\r\n    \r\n    if (len === 0) {\r\n        let nopost = (<div className=\"no-post\">Nothing here yet! Add a post...</div>);\r\n        return nopost;\r\n    }\r\n    else {\r\n        let post = postList[len - 1];\r\n\r\n        let gifs = document.querySelectorAll('.current-gif');\r\n        if (gifs.length > 0) {\r\n            let l = gifs.length;\r\n            for (let i = 0; i < l; i++) {\r\n                gifs[i].remove();\r\n            }\r\n        }\r\n        let newPost = (\r\n            <div className=\"post\" key={len - 1}>\r\n                <div className=\"post-text\"><pre>{post.text}</pre></div>\r\n                {\r\n                    post.gifSrc.map((elem, idx) => {\r\n                        let src = ROOT + elem + LEAF;\r\n                        return (\r\n                            <img key={idx}\r\n                                    id={elem}\r\n                                    className=\"post-gif\"\r\n                                    src={src} \r\n                                    alt={post.altTexts[idx]}\r\n                                    />\r\n                        );\r\n                    })\r\n                }\r\n            </div>\r\n        )\r\n\r\n        content.unshift(newPost);\r\n        return content;\r\n    }\r\n}\r\n\r\nexport default function DisplayPosts({ postList }) {\r\n    \r\n    return (\r\n        <div id=\"display-posts\">\r\n            {displayPosts(postList)}\r\n        </div>\r\n    );\r\n}","import React, { useState } from 'react';\r\n\r\nimport CreatePost from './CreatePost';\r\nimport DisplayPosts from './DisplayPosts';\r\n\r\n// App component is where we lift the state up from CreatePost component\r\n//  so that we can share it with the sibling component DisplayPosts.\r\n\r\nexport default function App() {\r\n    const [postList, setPostList] = useState([]);\r\n\r\n    return (\r\n        <>\r\n            <CreatePost postList={postList} onPost={setPostList}/>\r\n            <DisplayPosts postList={postList} />\r\n        </>\r\n    );\r\n}","import React from 'react';\r\nimport { render } from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nimport './index.css';\r\n\r\nconst root = document.querySelector('#root');\r\n\r\nrender(<App />, root);\r\n"],"sourceRoot":""}